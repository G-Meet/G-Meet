{
  "_from": "webrtc-screen-capturing",
  "_id": "webrtc-screen-capturing@1.0.1",
  "_inBundle": false,
  "_integrity": "sha512-yiAQw0EgqT8nnIyEOo++TRGbsAGXr+7e5CuIUB1jvazycIIDxfbcIV886D/cGrFH7OgpOT7KB6KcW0FcfXiKXg==",
  "_location": "/webrtc-screen-capturing",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "webrtc-screen-capturing",
    "fetchSpec": "latest",
    "name": "webrtc-screen-capturing",
    "raw": "webrtc-screen-capturing",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/webrtc-screen-capturing/-/webrtc-screen-capturing-1.0.1.tgz",
  "_shasum": "62d852440d76a7857ce5e1b4ebbcd2488383870c",
  "_spec": "webrtc-screen-capturing",
  "_where": "C:\\Users\\조수현\\Desktop\\VScode_project\\udemy\\Video-Chat",
  "analyze": false,
  "author": {
    "email": "muazkh@gmail.com",
    "name": "Muaz Khan",
    "url": "https://muazkhan.com/"
  },
  "bugs": {
    "email": "muazkh@gmail.com",
    "url": "https://github.com/muaz-khan/getScreenId/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Capture Screen on Any Domain! This script is a hack used to support single chrome extension usage on any HTTPs domain.",
  "devDependencies": {},
  "homepage": "https://www.webrtc-experiment.com/getScreenId/",
  "keywords": [
    "get-screen-id",
    "getscreenid",
    "javascript",
    "javascript-library",
    "library",
    "muaz",
    "muaz-khan",
    "rtcweb",
    "webrtc",
    "webrtc-experiment",
    "webrtc-library"
  ],
  "license": "MIT",
  "main": "getScreenId.js",
  "name": "webrtc-screen-capturing",
  "optionalDependencies": {},
  "preferGlobal": false,
  "readme": "# getScreenId | Capture Screen on Any Domain!\r\n\r\n* Live Demo: https://www.webrtc-experiment.com/getScreenId/\r\n* YouTube video: https://www.youtube.com/watch?v=UHrsfe9RYAQ\r\n\r\n[![npm](https://img.shields.io/npm/v/webrtc-screen-capturing.svg)](https://npmjs.org/package/webrtc-screen-capturing) [![downloads](https://img.shields.io/npm/dm/webrtc-screen-capturing.svg)](https://npmjs.org/package/webrtc-screen-capturing)\r\n\r\n1. Install this: https://chrome.google.com/webstore/detail/screen-capturing/ajhifddimkapgcifgcodmmfdlknahffk\r\n2. Now use below codes on any HTTPs domain.\r\n3. Remember, HTTPs is required.\r\n4. getScreenId gives you \"MediaStream\" object; you can share that object with other users using AppRTC demo, SimpleWebRTC or EasyRTC or PeerJs libraries, or any standalone peer-to-peer demo.\r\n5. In simple words, you have to use RTCPeerConnection API along with getScreenId to share screen with other users.\r\n\r\n```sh\r\nnpm instll webrtc-screen-capturing\r\n```\r\n\r\n> Hacking to use single chrome-extension on any domain!\r\n\r\n```html\r\n<!--\r\n* This script is a hack used to support single chrome extension usage on any domain.\r\n\r\n* This script has issues, though.\r\n* It uses \"postMessage\" mechanism which fails to work if someone is using it from inside an <iframe>.\r\n* The only solution for such cases is, use WebSockets or external servers to pass \"source-ids\".\r\n-->\r\n```\r\n\r\n> You don't need to PUBLISH/deploy your own chrome-extension when using this script!\r\n\r\n# LocalHost server\r\n\r\n```sh\r\nnode server.js\r\n```\r\n\r\nNope open: `https://localhost:9001/`\r\n\r\n# How to use?\r\n\r\n```html\r\n<script src=\"https://cdn.WebRTC-Experiment.com/getScreenId.js\"></script>\r\n<script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\r\n\r\n<video controls autoplay playsinline></video>\r\n```\r\n\r\n# `getScreenId`\r\n\r\nThis method allows you get chrome-media-source-id; which can be used to capture screens.\r\n\r\n```javascript\r\ngetScreenId(function (error, sourceId, screen_constraints) {\r\n    // error    == null || 'permission-denied' || 'not-installed' || 'installed-disabled' || 'not-chrome'\r\n    // sourceId == null || 'string' || 'firefox'\r\n\r\n    if(navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)) {\r\n        navigator.getDisplayMedia(screen_constraints).then(stream => {\r\n            document.querySelector('video').srcObject = stream;\r\n        }, error => {\r\n            alert('Please make sure to use Edge 17 or higher.');\r\n        });\r\n        return;\r\n    }\r\n\r\n    if(error == 'not-installed') {\r\n      alert('Please install Chrome extension.');\r\n      return;\r\n    }\r\n\r\n    navigator.mediaDevices.getUserMedia(screen_constraints).then(function (stream) {\r\n        document.querySelector('video').srcObject = stream;\r\n\r\n        // share this \"MediaStream\" object using RTCPeerConnection API\r\n    }).catch(function (error) {\r\n      console.error('getScreenId error', error);\r\n\r\n      alert('Failed to capture your screen. Please check Chrome console logs for further information.');\r\n    });\r\n});\r\n```\r\n\r\nOr...\r\n\r\n```javascript\r\ngetScreenId(function (error, sourceId, screen_constraints) {\r\n    // error    == null || 'permission-denied' || 'not-installed' || 'installed-disabled' || 'not-chrome'\r\n    // sourceId == null || 'string' || 'firefox'\r\n\r\n    if(sourceId && sourceId != 'firefox') {\r\n        screen_constraints = {\r\n            video: {\r\n                mandatory: {\r\n                    chromeMediaSource: 'screen',\r\n                    maxWidth: 1920,\r\n                    maxHeight: 1080,\r\n                    minAspectRatio: 1.77\r\n                }\r\n            }\r\n        };\r\n\r\n        if (error === 'permission-denied') return alert('Permission is denied.');\r\n        if (error === 'not-chrome') return alert('Please use chrome.');\r\n\r\n        if (!error && sourceId) {\r\n            screen_constraints.video.mandatory.chromeMediaSource = 'desktop';\r\n            screen_constraints.video.mandatory.chromeMediaSourceId = sourceId;\r\n        }\r\n    }\r\n\r\n    navigator.getUserMedia = navigator.mozGetUserMedia || navigator.webkitGetUserMedia;\r\n    navigator.getUserMedia(screen_constraints, function (stream) {\r\n        document.querySelector('video').src = URL.createObjectURL(stream);\r\n\r\n        // share this \"MediaStream\" object using RTCPeerConnection API\r\n    }, function (error) {\r\n      console.error('getScreenId error', error);\r\n\r\n      alert('Failed to capture your screen. Please check Chrome console logs for further information.');\r\n    });\r\n});\r\n```\r\n\r\n# `getChromeExtensionStatus`\r\n\r\nThis method allows you detect whether chrome extension is installed or not:\r\n\r\n```javascript\r\ngetChromeExtensionStatus(function(status) {\r\n    if (status === 'installed-enabled') alert('installed');\r\n    if (status === 'installed-disabled') alert('installed but disabled');\r\n    // etc.\r\n});\r\n```\r\n\r\n# How it works?\r\n\r\n* Your script will make a `postMessage` request to `getScreenId.js`\r\n* `getScreenId.js` will connect with chrome-extension using an internal `<iframe>`.\r\n* That `<iframe>` is loaded from domain: `https://www.webrtc-experiment.com/`\r\n* That `<iframe>` can connect with chrome-extension. It can send/receive `postMessage` data.\r\n* Same `postMessage` API are used to pass `screen-id` back to your script.\r\n\r\n# Custom Parameter\r\n\r\nPass second argument to `getScrenId` method:\r\n\r\n* `true` means that capture system audio i.e. speakers\r\n* `[]` array means that capture custom array items\r\n\r\n```javascript\r\ngetScreenId(successCallback, true);    // capture speakers\r\ngetScreenId(successCallback, ['tab']); // capature only tab\r\ngetScreenId(successCallback, ['window']); // capature only app's windows\r\ngetScreenId(successCallback, ['screen', 'audio']); // capature only screen with speakers\r\n```\r\n\r\n# Firefox\r\n\r\n* https://github.com/muaz-khan/Firefox-Extensions/tree/master/enable-screen-capturing\r\n\r\n# Deploy extension yourself?\r\n\r\n* https://github.com/muaz-khan/Chrome-Extensions/tree/master/desktopCapture\r\n\r\n# Alternative?\r\n\r\n* https://github.com/muaz-khan/Chrome-Extensions/tree/master/Screen-Capturing.js\r\n\r\n# License\r\n\r\n[getScreenId.js](https://github.com/muaz-khan/getScreenId) is released under [MIT licence](https://www.webrtc-experiment.com/licence/) . Copyright (c) [Muaz Khan](http://www.MuazKhan.com/).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/muaz-khan/getScreenId.git"
  },
  "scripts": {
    "start": "node server.js",
    "test": "protractor test/browserstack.config.js"
  },
  "version": "1.0.1"
}
